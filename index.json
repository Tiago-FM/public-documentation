[
{
	"uri": "https://docs.fpfis.eu/php-sdks/",
	"title": "PHP SDKs",
	"tags": [],
	"description": "",
	"content": " A curated lists of PHP SDKs maintained by FPFIS :\niTopApi The plugins SDK allows for interactions with iTop CMDB.\ncomposer require ec-europa/itopapi:~1.0  Backtrac PHP client This projects includes both a client library and a phing helper to trigger visual comparison.\ncomposer require ec-europa/backtrac-php-client:~0.1  "
},
{
	"uri": "https://docs.fpfis.eu/docker-images/",
	"title": "Docker images",
	"tags": [],
	"description": "",
	"content": " Hub All images are available on FPFIS\u0026rsquo;s Docker hub\nA curated lists of docker images maintained by FPFIS\nRedis Redis Docker image\ndocker pull fpfis/redis  Varnish Varnish Docker image\ndocker pull fpfis/varnish  "
},
{
	"uri": "https://docs.fpfis.eu/php-sdks/backtrac-php-client/",
	"title": "Backtrac PHP client",
	"tags": [],
	"description": "",
	"content": " This projects includes both a client library and a phing helper to trigger visual comparison.\nInstallation composer require ec-europa/backtrac-php-client:~0.1  Usage as library \u0026lt;?php require_once __DIR__.'/../vendor/autoload.php'; $client = new \\EC\\Utils\\Backtrac\\Client( 1, 'aaaaaaaaaaaaaaa' ); /** * Create a website object */ $website = new \\EC\\Utils\\Backtrac\\Website('test-site','http://ci-test.com'); /** * Set the new url for dev : */ $client-\u0026gt;setDevWebsite($website); /** * Compare prod a dev : */ $diffId = $client-\u0026gt;compareEnvironments( \\EC\\Utils\\Backtrac\\Client::COMPARE_PROD_DEV )-\u0026gt;result-\u0026gt;nid; /** * Wait for the end of the diff and display result : */ var_dump( $client-\u0026gt;waitForResults($diffId) ); /** * Custom compare : */ var_dump( $client-\u0026gt;customCompare( 'my_diff', new \\EC\\Utils\\Backtrac\\Website('site_1','http://xxxx.yyy/zzz'), new \\EC\\Utils\\Backtrac\\Website('site_2', 'http://xxx.yyy/zzzzw') ) );  Usage as Phing task \u0026lt;?xml version=\u0026quot;1.0\u0026quot; ?\u0026gt; \u0026lt;project default=\u0026quot;backtrac-compare-self\u0026quot; name=\u0026quot;test\u0026quot; basedir=\u0026quot;.\u0026quot;\u0026gt; \u0026lt;!-- Import the phing tasks into your project. --\u0026gt; \u0026lt;import file=\u0026quot;${project.basedir}/vendor/ec-europa/backtrac-php-client/phing/import.xml\u0026quot; /\u0026gt; \u0026lt;!-- Example target to update a website url for an environment. --\u0026gt; \u0026lt;target name=\u0026quot;backtrac-update-url\u0026quot;\u0026gt; \u0026lt;backtrac-set-url secure=\u0026quot;true\u0026quot; environment=\u0026quot;development\u0026quot; url=\u0026quot;http://xyz.com\u0026quot; project_id=\u0026quot;12\u0026quot; auth_token=\u0026quot;xxxxxxxx\u0026quot; /\u0026gt; \u0026lt;/target\u0026gt; \u0026lt;!-- Example target for comparing different environments: prod and dev. --\u0026gt; \u0026lt;target name=\u0026quot;backtrac-compare-prod-dev\u0026quot;\u0026gt; \u0026lt;backtrac-compare secure=\u0026quot;true\u0026quot; compare_mode=\u0026quot;compare_prod_dev\u0026quot; project_id=\u0026quot;12\u0026quot; check_results=\u0026quot;true\u0026quot; auth_token=\u0026quot;xxxxxxxx\u0026quot; /\u0026gt; \u0026lt;/target\u0026gt; \u0026lt;!-- Example target to take single snapshot: before deployment or build. --\u0026gt; \u0026lt;target name=\u0026quot;backtrac-single-snapshot\u0026quot;\u0026gt; \u0026lt;backtrac-compare secure=\u0026quot;true\u0026quot; compare_mode=\u0026quot;snapshot\u0026quot; environment=\u0026quot;production\u0026quot; project_id=\u0026quot;12\u0026quot; check_results=\u0026quot;false\u0026quot; auth_token=\u0026quot;xxxxxxxx\u0026quot; /\u0026gt; \u0026lt;/target\u0026gt; \u0026lt;!-- Example target for comparing environment to latest snapshot: after deployment or build. --\u0026gt; \u0026lt;target name=\u0026quot;backtrac-compare-self\u0026quot;\u0026gt; \u0026lt;backtrac-compare secure=\u0026quot;true\u0026quot; compare_mode=\u0026quot;compare_itself\u0026quot; environment=\u0026quot;production\u0026quot; project_id=\u0026quot;12\u0026quot; check_results=\u0026quot;false\u0026quot; auth_token=\u0026quot;xxxxxxxx\u0026quot; /\u0026gt; \u0026lt;/target\u0026gt; \u0026lt;/project\u0026gt;  \n"
},
{
	"uri": "https://docs.fpfis.eu/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.fpfis.eu/",
	"title": "FPFIS documentation",
	"tags": [],
	"description": "",
	"content": " Introduction This space is a placeholder for all documentation about FPFIS\u0026rsquo;s OpenSource projects.\nPHP SDKs Multiple PHP SDKs are provided for various clients.\nDocker images Docker images are also provided for other tasks, eg, an nginx web server, a Composer Docker image\n"
},
{
	"uri": "https://docs.fpfis.eu/docker-images/redis/",
	"title": "Redis",
	"tags": [],
	"description": "",
	"content": " Image Image is named fpfis/redis and based on CentOS 6.\nConfiguration No configuration is available for this image.\nPort Redis is running on port 6379 by default.\nExample docker run -p 6379:6379 -ti --rm fpfis/redis   \n"
},
{
	"uri": "https://docs.fpfis.eu/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.fpfis.eu/docker-images/varnish/",
	"title": "Varnish",
	"tags": [],
	"description": "",
	"content": " Image Image is named fpfis/varnish and based on CentOS 6.\nConfiguration Use the following environment variable to configure the image :\nHTTP_PORT Port to listen to ( default 6080 )\nDEFAULT_BACKEND Backend to connect to ( default localhost:8080 )\nMouting VCL volume VCL must be mounted in /etc/varnish and a default.vcl should be present.\nExample Assuming you have a working VCL with default.vcl in your local varnish folder :\ndocker run -p 6080:6080 -ti --rm -e DEFAULT_BACKEND=172.16.10.1:8080 -v $(pwd)/varnish:/etc/varnish fpfis/varnish   \n"
},
{
	"uri": "https://docs.fpfis.eu/php-sdks/itopapi/",
	"title": "iTopApi",
	"tags": [],
	"description": "",
	"content": " iTopApi PHP is an helper class to use and query the iTop API from your PHP scripts.\nInstallation composer require ec-europa/itopapi  Getting data require 'vendor/autoload.php'; $iTopAPI = new \\iTopApi\\ITopClient( 'http://localhost/itop', 'itopUser', 'iTopPassword' ); //disable SSL checks ? //$iTopAPI-\u0026gt;setCertificateCheck(false); $query = sprintf(\u0026quot;SELECT Servers WHERE environment = '%s'\u0026quot;,'development'); $serversRequest = $iTopAPI-\u0026gt;coreGet(\u0026quot;Servers\u0026quot;,$query); $servers = $serverRequest['objects'];  Creating data require 'vendor/autoload.php'; $iTopAPI = new \\iTopApi\\ITopClient( 'http://localhost/itop', 'itopUser', 'iTopPassword' ); //disable SSL checks ? //$iTopAPI-\u0026gt;setCertificateCheck(false); $request = $iTopAPI-\u0026gt;coreCreate(\u0026quot;Servers\u0026quot;,array( 'hostname' =\u0026gt; 'localhost', 'memory' =\u0026gt; 2048, 'cpu' =\u0026gt; 4, 'location' =\u0026gt; 'dc1' ));  Updating data require 'vendor/autoload.php'; $iTopAPI = new \\iTopApi\\ITopClient( 'http://localhost/itop', 'itopUser', 'iTopPassword' ); //disable SSL checks ? //$iTopAPI-\u0026gt;setCertificateCheck(false); $request = $iTopAPI-\u0026gt;coreUpdate(\u0026quot;Servers\u0026quot;,array( 'hostname' =\u0026gt; 'localhost' ),array( 'memory' =\u0026gt; 1024 ));  Using object oriented require 'vendor/autoload.php'; $iTopAPI = new \\iTopApi\\ITopClient( 'http://localhost/itop', 'itopUser', 'iTopPassword' ); //disable SSL checks ? //$iTopAPI-\u0026gt;setCertificateCheck(false); /** * Query and iterate */ $servers = $iTopAPI-\u0026gt;getObjects(\u0026quot;Server\u0026quot;, array( 'name' =\u0026gt; 'server001' ) ); foreach($servers as $server) { echo $server-\u0026gt;name.' is '.$server-\u0026gt;status_friendlyname; $server-\u0026gt;name = 'server001-eu'; $server-\u0026gt;save(); } /** * Deletes a new server : */ if($server-\u0026gt;status_friendlyname == 'decommissioning') $server-\u0026gt;delete(); /** * Creates a new server : */ $server = $iTopClient-\u0026gt;getNewObject('Server'); $server-\u0026gt;name = 'server002'; $server-\u0026gt;status_friendlyname = 'deployed'; $server-\u0026gt;save();  \n"
}]